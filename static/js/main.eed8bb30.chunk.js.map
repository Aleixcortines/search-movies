{"version":3,"sources":["components/title.js","components/SearchForm.js","components/Movie.js","components/MoviesList.js","App.js","serviceWorker.js","index.js"],"names":["Title","children","className","API_KEY","SearchForm","state","inputMovie","_handleChange","e","setState","target","value","_handleSubmit","preventDefault","fetch","then","res","json","results","Search","totalResults","console","log","props","onResults","onSubmit","this","onChange","type","placeholder","Component","Movie","poster","title","year","alt","src","MoviesList","movies","map","movie","key","imdbID","Year","Poster","App","usedSearch","_handleResults","length","_renderResults","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yPAEaA,EAAQ,SAAC,GAAD,IAAEC,EAAF,EAAEA,SAAF,OACjB,wBAAIC,UAAU,SAASD,ICDrBE,EAAS,WAEFC,EAAb,2MAGQC,MAAO,CACHC,WAAW,IAJvB,EAOQC,cAAgB,SAACC,GAEb,EAAKC,SAAS,CAACH,WAAYE,EAAEE,OAAOC,SAThD,EAYQC,cAAc,SAACJ,GAEXA,EAAEK,iBAFa,IAGRP,EAAc,EAAKD,MAAnBC,WACPQ,MAAM,kCAAD,OAAmCX,EAAnC,cAAgDG,IACpDS,KAAK,SAAAC,GAAG,OAAGA,EAAIC,SACfF,KAAK,SAAAG,GAAW,MAE2BA,EAAjCC,cAFM,MAEE,GAFF,IAE2BD,EAArBE,oBAFN,MAEoB,IAFpB,EAGbC,QAAQC,IAAI,CAACH,SAAOC,iBAEpB,EAAKG,MAAMC,UAAUL,MAvBrC,wEA4BY,OACA,0BAAMM,SAAUC,KAAKd,eACjB,yBAAKV,UAAU,oBACf,yBAAKA,UAAU,WACX,2BACAA,UAAU,gBAEVyB,SAAUD,KAAKnB,cACfqB,KAAK,OACLC,YAAY,kBAGhB,yBAAK3B,UAAU,WACf,4BAAQA,UAAU,8BAAlB,iBAzChB,GAAgC4B,aCDnBC,EAAb,iLAOa,IAAD,EACuBL,KAAKH,MAAzBS,EADH,EACGA,OAAOC,EADV,EACUA,MAAMC,EADhB,EACgBA,KACpB,OACI,yBAAKhC,UAAU,QACX,yBAAKA,UAAU,cACX,4BAAQA,UAAU,SACd,yBACAiC,IAAKF,EACLG,IAAKJ,MAIb,yBAAK9B,UAAU,gBACX,yBAAKA,UAAU,SAEnB,yBAAKA,UAAU,iBACX,uBAAGA,UAAU,cAAc+B,GAC3B,uBAAG/B,UAAU,iBAAiBgC,WAxBlD,GAA2BJ,aCCdO,EAAb,iLAKa,IACEC,EAAUZ,KAAKH,MAAfe,OACP,OACI,yBAAKpC,UAAU,cAEXoC,EAAOC,IAAI,SAAAC,GACP,OACA,yBAAKC,IAAKD,EAAME,OAASxC,UAAU,mBAC/B,kBAAC,EAAD,CAEI+B,MAAOO,EAAMxC,MACbkC,KAAMM,EAAMG,KACZX,OAAQQ,EAAMI,iBAjB1C,GAAgCd,aCyCjBe,G,uNAlCbxC,MAAQ,CAAEyC,YAAY,EAAO5B,QAAQ,I,EAErC6B,eAAgB,SAAC7B,GACf,EAAKT,SAAS,CAACS,UAAS4B,YAAY,K,gFAKnC,OAAoC,IAA7BpB,KAAKrB,MAAMa,QAAQ8B,OACvB,uDACA,kBAAC,EAAD,CAAYV,OAAQZ,KAAKrB,MAAMa,Y,+BAMnC,OACE,yBAAKhB,UAAU,OACb,kBAAC,EAAD,sBACA,yBAAKA,UAAU,sBAEf,kBAAC,EAAD,CAAYsB,UAAWE,KAAKqB,kBAE3BrB,KAAKrB,MAAMyC,WACXpB,KAAKuB,iBACJ,sE,GA5BQnB,cCIEoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9C,KAAK,SAAA+C,GACjCA,EAAaC,gB","file":"static/js/main.eed8bb30.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport const Title = ({children})=>(\r\n    <h1 className=\"title\">{children}</h1>\r\n)","import React, {Component} from 'react'\r\n\r\nconst API_KEY ='1f01dbe3';\r\n\r\nexport class SearchForm extends Component{\r\n  \r\n        //We wil control our state about the form. First we create a initial state as a empty string\r\n        state ={\r\n            inputMovie:''           \r\n        }\r\n\r\n        _handleChange = (e) =>{\r\n            //secondly we update the input event\r\n            this.setState({inputMovie: e.target.value})\r\n        }\r\n\r\n        _handleSubmit=(e)=>{\r\n            //Finally, We capture the value on the form\r\n            e.preventDefault()\r\n            const {inputMovie} = this.state;\r\n            fetch(`http://www.omdbapi.com/?apikey=${API_KEY}&s=${inputMovie}`)\r\n            .then(res =>res.json())\r\n            .then(results => {\r\n                //extract on results the property search and total results\r\n                const {Search =[], totalResults ='0'} = results\r\n                console.log({Search,totalResults})\r\n                //we generate a prop onResults to comunicate the results to the father component\r\n                this.props.onResults(Search)\r\n            })\r\n        }\r\n        \r\n        render(){\r\n            return(\r\n            <form onSubmit={this._handleSubmit}>\r\n                <div className=\"field has-addons\">\r\n                <div className=\"control\">\r\n                    <input \r\n                    className=\"input is-info\" \r\n                    //onchange method execute when detect changes on the input\r\n                    onChange={this._handleChange}\r\n                    type=\"text\" \r\n                    placeholder=\"Find a movie\"/>\r\n                \r\n            </div>\r\n                <div className=\"control\">\r\n                <button className=\"button is-info is-outlined\">\r\n                Search\r\n                </button>\r\n                </div>\r\n            </div>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n","import React, {Component} from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport class Movie extends Component{\r\n    static propTypes={\r\n        title: PropTypes.string,\r\n        year: PropTypes.string,\r\n        poster: PropTypes.string\r\n    }\r\n\r\n    render(){\r\n        const {poster,title,year} =this.props\r\n        return (\r\n            <div className=\"card\">\r\n                <div className=\"card-image\">\r\n                    <figure className=\"image\">\r\n                        <img \r\n                        alt={title}\r\n                        src={poster}\r\n                        />\r\n                    </figure>\r\n                </div>\r\n                <div className=\"card-content\">\r\n                    <div className=\"media\">\r\n     \r\n                <div className=\"media-content\">\r\n                    <p className=\"title is-4\">{title}</p>\r\n                    <p className=\"subtitle is-6\">{year}</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n        )\r\n    }\r\n}","import React, {Component} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {Movie} from './Movie'\r\n\r\nexport class MoviesList extends Component{\r\n    static propTypes = {\r\n        movies: PropTypes.array\r\n    }\r\n\r\n    render(){\r\n        const {movies} = this.props\r\n        return (\r\n            <div className='MoviesList'>\r\n            {\r\n                movies.map(movie => {\r\n                    return (\r\n                    <div key={movie.imdbID}  className='MoviesList-item'>\r\n                        <Movie \r\n                            \r\n                            title={movie.Title}\r\n                            year={movie.Year}\r\n                            poster={movie.Poster}\r\n                        />\r\n                    </div>\r\n                    )\r\n                  })\r\n                \r\n            }\r\n            </div>\r\n        ) \r\n    }\r\n}","import React, { Component } from 'react'\nimport {Title} from './components/title';\nimport {SearchForm} from './components/SearchForm';\nimport {MoviesList} from './components/MoviesList';\n\nimport './App.css';\nimport 'bulma/css/bulma.css';\n\nclass App extends Component{\n\n  //we create a empty array in state to full with movies\n  state = { usedSearch: false, results:[]}\n  //update the results array\n  _handleResults =(results)=>{\n    this.setState({results, usedSearch: true})\n  }\n\n  _renderResults(){\n\n     return this.state.results.length ===0\n      ? <p>Sorry results not found!</p>\n      : <MoviesList movies={this.state.results}/>\n  }\n\n\n\n  render(){\n    return (\n      <div className=\"App\">\n        <Title>Search Movies</Title>\n        <div className='SearchForm-wrapper'>\n      \n        <SearchForm onResults={this._handleResults}/>\n        </div>\n        {this.state.usedSearch\n        ?this._renderResults()\n        : <small>Use the form to search a movie</small>\n        }\n        \n      </div>\n    );\n  }\n \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}